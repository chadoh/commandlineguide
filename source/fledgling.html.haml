---
title: A Fledgling Nerd's Guide to the Command Line
---

%section
  %section
    %h3 A Fledgling Nerd's Guide To
    %h1 The Command Line
    %a(href="http://www.iterm2.com/")
      %img(src='http://upload.wikimedia.org/wikipedia/en/d/d7/ITerm2-icon.png'
           alt='' style="width: 256px")
    :markdown
      This is the second part of [a non-nerd's guide](/) to
      the command line. You'll be definitively intermediate by the finish.
      To get started, go that way. &rarr;

%section
  %section
    %h2 Making It Pretty
    :markdown
      Bash can be customized by putting a `.bashrc` file in your home
      directory.

      <small>`rc` stands for "Runtime Control", which doesn't shed a whole lot
      of light. Just remember that rc files are configuration files.</small>

      Here's a nice introductory [.bashrc][brc] file that you can download to
      get started (make sure to save it to your home folder as ".bashrc" (_with
      the dot!!_)). You can [search Github][dotfiles] for "dotfiles" for lots
      of other ideas.

        [brc]: /bashrc
        [dotfiles]: https://github.com/search?q=dotfiles+bash&repo=&langOverride=&start_value=1&type=Everything&language=

  %section
    %h3 Pretty Prompt
    :markdown
      Look through the .bashrc you downloaded for instructions on how to make your shell look like this.

      ![a shell with pretty and minimalist prompt](/images/pretty-prompt.png)

%section
  %section
    %h2 Editing Files &ndash; nano
    :markdown
      [Looking at contents of files][reading] is nice, but you can also edit them right
      from the command line. The simplest way is arguably `nano`. Go ahead
      and save [this file][dooms] to your current working directory and

          $ nano my-father-moved-through-dooms-of-love

      You can move the cursor around in `nano` with the arrow keys.  `nano`
      also has a bunch of shortcuts, which are all listed at the bottom. This way to learn what they mean. &darr;

        [reading]: /#/5
        [dooms]: /my-father-moved-through-dooms-of-love

  %section
    %h2 Nano Shortcuts (nanocuts?)
    :markdown

      `^` means "Control".

      "WriteOut" means "*Write* the contents of this file *Out* to disc", which
      really just means "save". In the crusty world of shell, "write" is a
      common synonym of "save".

      So to save the file after editing, hit `^O`, that is, Control-O.

      To exit, `^X` (Control-X).

      <small>PS: "nanocuts" would make a good band name</small>
      <br>
      <small>PPS: So would "Crusty World of Shell"</small>

%section
  %section
    %h2 Editing Files &ndash; vim
    :markdown
      `vim` is weird & [hard to learn][vimbook], but a lot of people [love it a
      lot][whyvim]. You'll inevitably run into it on your adventures, so it'll
      be good to know some basics.

      So let's open it up.

          $ vim my-father-moved-through-dooms-of-love

      Ok, there's a lot to say; right this way please. &darr;

        [vimbook]: http://pragprog.com/book/dnvim/practical-vim
        [whyvim]:  http://stevelosh.com/blog/2010/09/coming-home-to-vim/

  %section
    %h2 One Mode to Rule Them All
    :markdown
      Vim has modes. Not moods; modes. Maybe it's moody, too, though. idk

      Vim starts out in "normal" mode. This is where vim pros spend most of
      their time. But a funny thing about Normal mode: *you can't type anything in it*.

      Yes! Vim is an editor that, by default, does not let you type text! And
      though that sounds crazy, it turns out to be delightful, empowering,
      out-of-the-box thinking.

      Find out why &darr;

  %section
    %h2 Lazy Scrollers
    :markdown
      Vim pros, being good [lazy] coders, don't want to move their hands *the
      whole painful way* to the arrow keys. Have you ever heard of Repetitive
      Strain Injury? No thank you! To learn The Vim Way, stop reaching and try:

      * `j` to move down
      * `k` to move up
      * `h` to move left
      * `l` to move right

      Aaahhhh... All right on home row! Stop moving those hands! For more vim
      goodness, right this way &darr;

        [lazy]: http://threevirtues.com/

  %section
    %h2 Manipulating Text
    :markdown
      Even though `j` and `k` move a cursor rather than type "j" or "k",
      Normal Mode is great for manipulating text. Try:

      * `dd` to delete the current line
      * `D` to delete to the end of the current line
      * `yy` to yank (copy) the current line
      * `p` to paste whatever you last deleted or yanked
      * `>>` & `<<` to indent & outdent the current line
      * `6dd`, `5D`, `4yy`, `3>>`, & `2p` &ndash; guess. Try them.
      * `.` to redo the last text-changing command

      But what about, you know, actually typing? &darr;

  %section
    %h2 Inserting Text
    :markdown
      To insert text, you need to put vim into Insert Mode. Once you're done
      typing, hit `escape` (top left of the keyboard) to go back to Normal Mode
      asap. Try:

      * `i` & `I` to insert before cursor/line
      * `a` & `A` to append after cursor/line
      * `o` & `O` to *open* a new line of text â€“ try it!
      * `C` to change to the end of the line
      * `s` & `S`: substitute (replace) current character/line
      * `.` same thing as before. Worth mentioning twice.

      How to save all these beautiful edits, though? &darr;

  %section
    %h2
      Colon Commands (<code>:</code> not
      <img draggable="false" class="emoji" alt="ðŸ’©" src="https://twemoji.maxcdn.com/72x72/1f4a9.png">)
    :markdown
      Vim has a whole "command mode" that isn't really a mode. While in Normal
      Mode, you can type `:`, followed by a command. For example:

      * `:w` will save (because ["write" means "save"][write])
      * `:q` will quit vim
      * `:wq`, `:x`, or (even lazier) `ZZ` will save and quit
      * `:!mkdir hey` will run `mkdir hey` in your shell &ndash; you can run
        any shell command right from vim this way

      Wee! You know so much vim now!<br/> But how to remember it all? &darr;

        [write]: #/2/1

  %section
    %h2 Cheater Cheater Pumpkin Eater
    :markdown
      Vim is best learned in little chunks. If you memorize the commands you
      just learned, you'll already be as fast (or faster) with vim as with your
      current editor.

      So bookmark this page, and keep coming back until you don't need to.
      But better yet, bookmark [this cheat sheet](http://vim.rtorr.com/), and
      refer to it constantly while you use vim. After a couple weeks, you won't
      need it anymore.

      And one last thing. We all like pretty things. Let's make vim prettier. &darr;

  %section
    %h2 But it's so ugly
    :markdown
      By default, yes. Vim is ugly. But with a configuration file, it too can
      have colors and remember indentation levels.

      Save [this file](/vimrc) into your home directory as `.vimrc`. It's a
      simple file&mdash;open it (with vim!) and you could definitely figure out
      what it's doing. Each line of it is actually something you could type in
      a colon command (try it out!).

      If you want to make it even prettier, check out these [dotfiles]. Using
      plugins, they add nice things like a file navigator sidebar, quick file
      finder, and super-fast folder-wide search.

        [dotfiles]: https://github.com/chadoh/dotfiles

  %section
    %h2 Flame Wars
    :markdown
      Some programmers get really territorial and religious about their editor
      of choice. They make [gang signs][gang] for `vim` and `emacs` (another popular
      editor). It's silly.

      [![comic about editors][comic]][link]

        [gang]: https://twitter.com/chrischau/status/20322575538
        [comic]: http://imgs.xkcd.com/comics/real_programmers.png "Real programmers set the universal constants at the start such that the universe evolves to contain the disk with the data they want."
        [link]:  http://xkcd.com/378/

%section
  %section
    %h2 Know Your Root
    :markdown
      You're not allowed to do certain things on your computer, because you
      could cause serious damage. You could literally _erase your whole hard
      drive_ by running something like `rm -rf /` (_don't do this!!_). Since no one wants to
      accidentally destroy things, you have to do extra work to change system
      files. You need _root access_. You need to be a _super user_. An
      _administrator_.

      This works differently on Windows than anything else. This way for
      instructions on any system. &darr;

  %section
    %h2 Live Dangerously &ndash; Unix
    :markdown
      On most *nix-based systems these days (unix, linux, OSX), you're not
      allowed to just run around as a super user because that's _scary_.
      Instead, you prefix specific commands with `sudo`:

          $ cd /
          $ ls
          $ mkdir bahaha
          $ sudo mkdir bahaha

      <small>
        When you type in your password, you won't see it.  You won't
        even see [splats](/#/3/3). That's intentional, just type your password
        into the void & hit Enter.
      </small>

      <small>
        `/` is the _root directory_, which is where your whole hard drive's
        filesystem starts. When you `cd ..` here, you stay here.  You're not
        allowed to change things in here unless you `sudo`, which means _Super
        User DO_.
      </small>

  %section
    %h2 Living Dangerously on Windows
    :markdown
      On Windows, you'll need to find the Git-Bash icon either on your Desktop
      or in the Windows Menu (if you pinned it to the taskbar, this won't work
      there.) Right-click the icon and select "Run as Administrator". Now you
      can live as dangerously as you want! For example, you can now:

          $ cd /c
          $ mkdir woohoo
          $ rm -r woohoo

  %section
    %h2 It's Like This
    :markdown
      [!["Make me a sandwich." "What? Make it yourself." "Sudo make me a sandwich." "OK."][comic]][link]

        [comic]: http://imgs.xkcd.com/comics/sandwich.png "Proper User Policy apparently means Simon Says"
        [link]:  http://xkcd.com/149/

      <small>By the way, you might want to `rm -r bahaha` now.</small>

%section
  %section
    %h2 Getting Other Unix Programs
    :markdown
      Sometimes the inbuilt stuff just isn't enough! If you want more, you'll need a _package manager_.

          $ cowsay Package Managers ftw!
            _______________________
           < Package Managers ftw! >
            -----------------------
                    \   ^__^
                     \  (oo)\_______
                        (__)\       )\/\
                            ||----w |
                            ||     ||

      Yes! An [ascii][ascii] cow! This way to get your own. &darr;

        [ascii]: https://en.wikipedia.org/wiki/ASCII

  %section
    %h2 Getting Cowsay and other fun things on OSX
    :markdown
      The preferred package manager for your Mac running OSX these days is
      [Homebrew][brew].  An older way was MacPorts, so you might still hear
      people mention that now & then. You can follow the link to Homebrew to
      see how to install it, but once you do, go ahead and

          $ brew install cowsay
          $ cowsay Hooray!

      <small>Note that Homebrew may whine about not having Xcode (or a
      compiler). Luckily, for `cowsay`, you don't need it. But for some
      things you might, so feel free to [download Xcode][store] from the Mac
      App Store (you only _need_ the [command line tools for Xcode][cli], but
      to just get those you need to sign up as an Apple developer. But that may
      be faster, since Xcode is a _huuuge_ install.)</small>

        [brew]: http://brew.sh/
        [store]: http://itunes.apple.com/us/app/xcode/id497799835
        [cli]: https://developer.apple.com/downloads

  %section
    %h2 Getting Cowsay and other fun things on Linux
    :markdown
      If you're using Linux, then you already have a package manager that you
      can use. On Ubuntu, you have two options, `apt-get` or `aptitude`.
      `aptitude` seems to be preferred by some people because it's better at
      uninstalling things. So:

          $ sudo aptitude install cowsay
          $ cowsay Hooray!

      <small>
        If you're using a different version of Linux, then instead of `aptitude`
        you might have `yum` or something. Just search the web for what package
        manager to use with your flavor of Linux.
      </small>

  %section
    %h2 Getting Cowsay and other fun things on Windows
    :markdown
      No idea. If you know, [please tell me](https://twitter.com/chadoh).

%section
  %h2 Read The Effing Manual
  :markdown
    Now and then, when [n00bs][n00b] ask for help on forums, the crotchety
    enlightened will respond with a curt "rtfm". What manual??

    Usually, every unix program comes with a manual (also called a
    "man page"). To read it, just do this with any command:

        $ man ls

    <small>This may open in `less`. [Remember less][less]?</small>

    Go ahead and check out the manual for some of the programs you've
    learned about (`less`, `cowsay`, etc).

      [n00b]: https://en.wikipedia.org/wiki/N00b
      [less]: /#/5

%section
  %section
    %h2 Pipes
    :markdown
      Look at the slash key on your keyboard that's above the Enter key
      (that's the backslash, by the way; the one on the `?` key is just
      "slash"). The vertical line above the backslash is called the "pipe"
      character.

      The philosophy of unix is that programs should do one very simple thing,
      and do it well. Then you can use pipes to hook multiple programs
      together. Try this:

          $ ls ~ | less

      You piped the results of `ls` into `less`! There are other kinds of
      pipes, too. &darr;

  %section
    %h2 A Series Of Pipes
    :markdown
      Try this:

          $ echo "So what?"

      Indeed, so what? `echo` just spits out what you tell it to. But with
      pipes, it gets cooler.

          $ echo "Here's something" > tmp.txt && less tmp.txt

      The `>` pipe _totally overwrites_ a file. Try this now:

          $ echo "& more." >> tmp.txt && less tmp.txt

      The `>>` pipe _appends_ to a file without destroying what was already
      there.

  %section
    %h2 Blanking Out Files
    :markdown
      There's an interesting twist on the `>` pipe: it doesn't need anything
      before it. Try this:

          $ > tmp.txt

      You just piped _nothing_ into tmp.txt. You overwrote all of its contents
      with nothing. Open it up (`cat` it, or `more` it, or whatever-you-like
      it) and you'll see that it's now empty.

%section
  %h2 I Quit
  :markdown
    To _force quit_ a process that seems to be stuck, just hit Control-C (*not*
    Command-C, OSX users!)

    This is used in a lot of places. Open up `ls ~ | less` and then hit
    Shift-F. This _follows_ the file, automatically showing you new content
    as it appears (which makes more sense with a log). To get it to stop
    following the file, you have to "interrupt" it, which you do with
    Control-C. Then you can `q` as normal to get out of `less` altogether.

%section(data-background="/images/hooray.png")
  %h2 Awesome
  :markdown
    You know a lot about the command line.

    Go boss your computer around.
